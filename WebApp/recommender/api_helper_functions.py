import json
import http.client
import boto3
import urllib3
import requests
import string
import random
import vertexai
from vertexai.generative_models import GenerativeModel

s3_client = boto3.client('s3')

API_KEY = "Secret"
API_HOST = "lg1uksflod.execute-api.us-east-1.amazonaws.com"
LOCAL_FILE_PATH = "/home/ec2-user/SageMaker"

vertexai.init(project="civic-origin-428619-r9", location="us-central1")
model = GenerativeModel(
"gemini-1.5-pro-001",
)

def getpresignedURL(fileName):
    conn = http.client.HTTPSConnection(API_HOST)
    payload = ''
    headers = {
        'X-API-key': API_KEY,
        'Content-type': 'application/json'
    }
    conn.request("GET", "/prod/TechJam/presignedUrl/{}".format(fileName), payload, headers)
    res = conn.getresponse()
    return json.loads(res.read().decode('unicode_escape'))


def getRecommendation(fileName):
    conn = http.client.HTTPSConnection(API_HOST)
    payload = ''
    headers = {
        'X-API-key': API_KEY,
        'Content-type': 'application/json'
    }
    conn.request("GET", "/prod/TechJam/recommendation/{}".format(fileName), payload, headers)
    res = conn.getresponse()
    return json.loads(res.read().decode('unicode_escape'))


def upload_file_to_s3_presigned_url(file_path, presigned_url):
    with open(file_path, 'rb') as file:
        try:
            response = requests.put(presigned_url, data=file)
            response.raise_for_status()  # Raises stored HTTPError, if one occurred.
            print(f"Upload Successful: {response.status_code}")
            return response
        except requests.exceptions.RequestException as e:
            print(f"Upload Failed: {e}")

def check_recommendation_status(job_id):
    try:
        conn = http.client.HTTPSConnection(API_HOST)
        payload = ''
        headers = {
            'X-API-key': API_KEY,
            'Content-type': 'application/json'
        }
        url = f"https://lg1uksflod.execute-api.us-east-1.amazonaws.com/prod/TechJam/status/{job_id}"
        response = requests.get(url, headers=headers)
        return response.json()
    except Exception as e:
        print(f"Unable to find status: {e}")
def generate_random_string(length=5):
    letters_and_digits = string.ascii_letters + string.digits
    return ''.join(random.choice(letters_and_digits) for i in range(length))

def getRecommendation_gemini(labels):
    prompt = """Please Suggest Top 5 TikTok Audios or Songs that would be suitable for background audio
                for a video for which the following labels describe the video. 
                The ouput should be in html format so that it can be viewed within webpage easily.
                PLease do not include anything that suggest the content was generated by an AI. 
                """
    prompt += labels
    print(prompt)
    response = model.generate_content(prompt)
    if response.text:
        return response.text
    else:
        return ''